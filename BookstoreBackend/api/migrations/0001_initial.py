# Generated by Django 5.0.8 on 2024-09-20 23:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Admin',
            fields=[
                ('adminid', models.AutoField(db_column='AdminID', primary_key=True, serialize=False)),
                ('adminrole', models.CharField(db_column='AdminRole', max_length=50)),
            ],
            options={
                'db_table': 'admin',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CartProducts',
            fields=[
                ('cartproductid', models.AutoField(db_column='CartProductID', primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(db_column='Quantity')),
            ],
            options={
                'db_table': 'cartproducts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Carts',
            fields=[
                ('cartid', models.IntegerField(db_column='CartID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'carts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('categoryid', models.AutoField(db_column='CategoryID', primary_key=True, serialize=False)),
                ('categoryname', models.CharField(db_column='CategoryName', max_length=50)),
            ],
            options={
                'db_table': 'categories',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CategoryImage',
            fields=[
                ('imageid', models.AutoField(db_column='ImageID', primary_key=True, serialize=False)),
                ('imageurl', models.CharField(db_column='ImageURL', max_length=255)),
            ],
            options={
                'db_table': 'category_images',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='OrderProduct',
            fields=[
                ('orderproductid', models.AutoField(db_column='OrderProductID', primary_key=True, serialize=False)),
                ('quantity', models.IntegerField(db_column='Quantity')),
                ('price', models.DecimalField(db_column='Price', decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'orderproduct',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Orders',
            fields=[
                ('orderid', models.AutoField(db_column='OrderID', primary_key=True, serialize=False)),
                ('orderdate', models.DateTimeField(db_column='OrderDate')),
                ('deliverydate', models.DateTimeField(blank=True, db_column='DeliveryDate', null=True)),
                ('deliverymethod', models.CharField(db_column='DeliveryMethod', max_length=50)),
                ('paymentmethod', models.CharField(db_column='PaymentMethod', max_length=50)),
                ('orderstatus', models.CharField(db_column='OrderStatus', max_length=50)),
            ],
            options={
                'db_table': 'orders',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'product_category',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProductImages',
            fields=[
                ('imageid', models.AutoField(db_column='ImageID', primary_key=True, serialize=False)),
                ('imageurl', models.CharField(db_column='ImageURL', max_length=255)),
            ],
            options={
                'db_table': 'product_images',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('productid', models.AutoField(db_column='ProductID', primary_key=True, serialize=False)),
                ('productname', models.CharField(db_column='ProductName', max_length=100)),
                ('category', models.CharField(db_column='Category', max_length=50)),
                ('productdescription', models.TextField(db_column='ProductDescription')),
                ('productprice', models.DecimalField(db_column='ProductPrice', decimal_places=2, max_digits=10)),
                ('availablequantity', models.IntegerField(db_column='AvailableQuantity')),
                ('isrequestable', models.BooleanField(db_column='IsRequestable')),
            ],
            options={
                'db_table': 'products',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('userid', models.AutoField(db_column='userid', primary_key=True, serialize=False)),
                ('phonenumber', models.CharField(blank=True, db_column='phoneNumber', max_length=20, null=True)),
                ('address', models.CharField(blank=True, db_column='address', max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
